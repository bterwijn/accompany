/* Auto-generated by genmsg_cpp for file /home/patrizia/ros_workspace/AccompanyService/srv/db_msg.srv */
#ifndef ACCOMPANYSERVICE_SERVICE_DB_MSG_H
#define ACCOMPANYSERVICE_SERVICE_DB_MSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace AccompanyService
{
template <class ContainerAllocator>
struct db_msgRequest_ {
  typedef db_msgRequest_<ContainerAllocator> Type;

  db_msgRequest_()
  : request(0)
  , param()
  , sonReq(0)
  {
  }

  db_msgRequest_(const ContainerAllocator& _alloc)
  : request(0)
  , param(_alloc)
  , sonReq(0)
  {
  }

  typedef int64_t _request_type;
  int64_t request;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _param_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  param;

  typedef int64_t _sonReq_type;
  int64_t sonReq;


private:
  static const char* __s_getDataType_() { return "AccompanyService/db_msgRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "181bdb76a87c5a550e92c7efea63a2fa"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "3e6bed7dbd53be1f4d5a46e4a74c1074"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int64 request\n\
string param\n\
int64 sonReq\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, request);
    ros::serialization::serialize(stream, param);
    ros::serialization::serialize(stream, sonReq);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, request);
    ros::serialization::deserialize(stream, param);
    ros::serialization::deserialize(stream, sonReq);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(request);
    size += ros::serialization::serializationLength(param);
    size += ros::serialization::serializationLength(sonReq);
    return size;
  }

  typedef boost::shared_ptr< ::AccompanyService::db_msgRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::AccompanyService::db_msgRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct db_msgRequest
typedef  ::AccompanyService::db_msgRequest_<std::allocator<void> > db_msgRequest;

typedef boost::shared_ptr< ::AccompanyService::db_msgRequest> db_msgRequestPtr;
typedef boost::shared_ptr< ::AccompanyService::db_msgRequest const> db_msgRequestConstPtr;


template <class ContainerAllocator>
struct db_msgResponse_ {
  typedef db_msgResponse_<ContainerAllocator> Type;

  db_msgResponse_()
  : code(0)
  , sonRes(0)
  , answer()
  {
  }

  db_msgResponse_(const ContainerAllocator& _alloc)
  : code(0)
  , sonRes(0)
  , answer(_alloc)
  {
  }

  typedef int64_t _code_type;
  int64_t code;

  typedef int64_t _sonRes_type;
  int64_t sonRes;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _answer_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  answer;


private:
  static const char* __s_getDataType_() { return "AccompanyService/db_msgResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "1d865bd8b4398a7d5fd16ee78aa4168b"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "3e6bed7dbd53be1f4d5a46e4a74c1074"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int64 code\n\
int64 sonRes\n\
string answer\n\
\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, code);
    ros::serialization::serialize(stream, sonRes);
    ros::serialization::serialize(stream, answer);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, code);
    ros::serialization::deserialize(stream, sonRes);
    ros::serialization::deserialize(stream, answer);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(code);
    size += ros::serialization::serializationLength(sonRes);
    size += ros::serialization::serializationLength(answer);
    return size;
  }

  typedef boost::shared_ptr< ::AccompanyService::db_msgResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::AccompanyService::db_msgResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct db_msgResponse
typedef  ::AccompanyService::db_msgResponse_<std::allocator<void> > db_msgResponse;

typedef boost::shared_ptr< ::AccompanyService::db_msgResponse> db_msgResponsePtr;
typedef boost::shared_ptr< ::AccompanyService::db_msgResponse const> db_msgResponseConstPtr;

struct db_msg
{

typedef db_msgRequest Request;
typedef db_msgResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct db_msg
} // namespace AccompanyService

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::AccompanyService::db_msgRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::AccompanyService::db_msgRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::AccompanyService::db_msgRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "181bdb76a87c5a550e92c7efea63a2fa";
  }

  static const char* value(const  ::AccompanyService::db_msgRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x181bdb76a87c5a55ULL;
  static const uint64_t static_value2 = 0x0e92c7efea63a2faULL;
};

template<class ContainerAllocator>
struct DataType< ::AccompanyService::db_msgRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "AccompanyService/db_msgRequest";
  }

  static const char* value(const  ::AccompanyService::db_msgRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::AccompanyService::db_msgRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 request\n\
string param\n\
int64 sonReq\n\
\n\
";
  }

  static const char* value(const  ::AccompanyService::db_msgRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::AccompanyService::db_msgResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::AccompanyService::db_msgResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::AccompanyService::db_msgResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1d865bd8b4398a7d5fd16ee78aa4168b";
  }

  static const char* value(const  ::AccompanyService::db_msgResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1d865bd8b4398a7dULL;
  static const uint64_t static_value2 = 0x5fd16ee78aa4168bULL;
};

template<class ContainerAllocator>
struct DataType< ::AccompanyService::db_msgResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "AccompanyService/db_msgResponse";
  }

  static const char* value(const  ::AccompanyService::db_msgResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::AccompanyService::db_msgResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 code\n\
int64 sonRes\n\
string answer\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::AccompanyService::db_msgResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::AccompanyService::db_msgRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.request);
    stream.next(m.param);
    stream.next(m.sonReq);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct db_msgRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::AccompanyService::db_msgResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.code);
    stream.next(m.sonRes);
    stream.next(m.answer);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct db_msgResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<AccompanyService::db_msg> {
  static const char* value() 
  {
    return "3e6bed7dbd53be1f4d5a46e4a74c1074";
  }

  static const char* value(const AccompanyService::db_msg&) { return value(); } 
};

template<>
struct DataType<AccompanyService::db_msg> {
  static const char* value() 
  {
    return "AccompanyService/db_msg";
  }

  static const char* value(const AccompanyService::db_msg&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<AccompanyService::db_msgRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3e6bed7dbd53be1f4d5a46e4a74c1074";
  }

  static const char* value(const AccompanyService::db_msgRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<AccompanyService::db_msgRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "AccompanyService/db_msg";
  }

  static const char* value(const AccompanyService::db_msgRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<AccompanyService::db_msgResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3e6bed7dbd53be1f4d5a46e4a74c1074";
  }

  static const char* value(const AccompanyService::db_msgResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<AccompanyService::db_msgResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "AccompanyService/db_msg";
  }

  static const char* value(const AccompanyService::db_msgResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ACCOMPANYSERVICE_SERVICE_DB_MSG_H

